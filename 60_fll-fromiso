#! /bin/sh -e

# grub-mkconfig helper script.
#
# Copyright © 2009 Joaquim Boura <x-un-i@sidux.com>
# Copyright © 2009 Stefan Lippers-Hollmann <s.l-h@gmx.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# override tool behaviour through /etc/default/grub2-fll-fromiso
if [ -r /etc/default/grub2-fll-fromiso ]; then
	. /etc/default/grub2-fll-fromiso 
fi

FLL_GRUB2_ISO_LOCATION="${FLL_GRUB2_ISO_LOCATION:-"/var/cache/pyfll"}"
FLL_GRUB2_ISO_PREFIX="${FLL_GRUB2_ISO_PREFIX:-"sidux"}"
FLL_GRUB2_LANG="${FLL_GRUB2_LANG:-"de_DE"}"
FLL_GRUB2_TZ="${FLL_GRUB2_TZ:-"Europe/Berlin"}"
FLL_GRUB2_VGA="${FLL_GRUB2_VGA:-"794"}"
FLL_GRUB2_CHEATCODE="${FLL_GRUB2_CHEATCODE:-"quiet noeject screen=1400x1050 xrate=100"}"

# source overrides
# [ -r /etc/default/grub2-fll-fromiso ] && . /etc/default/grub2-fll-fromiso

# we need isoinfo if it's not there go out
ISOINFO=`which isoinfo`
if [ -z "${ISOINFO}" ]; then
	exit 
fi

# find ISO
FROMISO=`find ${FLL_GRUB2_ISO_LOCATION} -name ${FLL_GRUB2_ISO_PREFIX}*.iso`
# FROMISO="${FLL_GRUB2_ISO_LOCATION}/sidux-snapshot-kde-full-i386-amd64-200908230118.iso"

# no iso found quit
if [ -z "${FROMISO}" ]; then
	exit
fi

# assemble cmdline
CMDLINE="boot=fll vga=${FLL_GRUB2_VGA} lang=${FLL_GRUB2_LANG} TZ=${FLL_GRUB2_TZ} ${FLL_GRUB2_CHEATCODE} "

# create a tem device.map as the actual can be not uptodate
DEVICE_MAP_TMP=`mktemp` 
grub-mkdevicemap -m "${DEVICE_MAP_TMP}"

for iso_image in $FROMISO; do

	cur_device=`grub-probe --device-map=${DEVICE_MAP_TMP} --target=device ${iso_image}`
	cur_uuid=`grub-probe --device-map=${DEVICE_MAP_TMP} --target=fs_uuid ${iso_image}`

	mountpoint=`awk -v var="$cur_device" '{if ($1 == var){print $2}}' /proc/mounts`
	stripped_path="${iso_image##$mountpoint}"


	if [ "${mountpoint}" = "/"  ]; then
		stripped_path="/${stripped_path}"
	fi

	kernels=`${ISOINFO} -J -l -i ${iso_image} |awk '/vmlinuz/{print $12}' |sed 's/vmlinuz\-//'`

	for kernel in ${kernels}; do
		cat << EOF
menuentry "${FLL_GRUB2_ISO_PREFIX} ($kernel)" {
	search --no-floppy --fs-uuid --set ${cur_uuid}
	loopback loop ${stripped_path}
	linux (loop)/boot/vmlinuz-${kernel} fromhd=UUID=${cur_uuid} fromiso=${stripped_path} $CMDLINE
	initrd (loop)/boot/initrd.img-${kernel}
}
EOF
	done

done
